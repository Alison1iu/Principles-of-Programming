Program design: All java files can be found in src/edu/osu/cse
The parse folder holds the java files for the parser and the token folder holds the java files for the tokenizer.

The tokenizer:
	GrammerToken.java: set the complete grammer for CORE has been given in the course notes.

		GrammerToken(String value, int flag, int lineno, GrammerTokenType type) -- Create a new instance of GrammerToken

		GrammerTokenType getTokenType() -- Get token type of this instance

		getTokenID() -- Get id code of this instance

	Tokenizer.java: get the tokens from the input stream and displays the token number given above to the output stream one number per line.
	The legal tokens, white spaces and the token stream are initialized as array of strings
	
        	currentToken() -  Returns the current token

        	nextToken() - Advances to the next token

		isSpecialCharacter(int ch)	- Return whether the current token is a special character

		checkWhitespace(int ch) - Return whether the current token is a white space

	
		GrammerToken getInteger(int ch) --	getReservedWord(int ch), getIdentifier(int ch), getInteger(int ch), getSpecialSymbol(int ch), by using the four functions above, it break the CORE language into the into the four categories

		usage() - This will print the usage requirements and exit.

		close() - close the input source

The parser:

 	BaseNode.java - This is the base object. It defines the basic behave of all Node. It includes three abstract methods: isTokenTypeMatch(int tokenid), getNodeTypeLimit(), and parsingValue(Tokenizer tokenizer). 
 		isTokenTypeMatch(int tokenid) will be used to check a given token id is matching with the instance of current Node .
 		getNodeTypeLimit() is used to retrieve the type of GrammerToken which will be allowed for the Node.
 		parsingValue(Tokenizer tokenizer) is used to construct the instance of current Node.

 		hasChildNode() check if this instance has child node or not
 		addChildNode(BaseNode node) add child node, and at the same time set up the print format
 		getChildNode(int index) get child Node at index
 		checkSignature(Tokenizer tokenizer) Check if current token in Tokenizer can match with this Node.
 		checkTokenType(Tokenizer tokenizer, int targetID) Check if current token in Tokenizer can match with this targetID.
 		addIndent(int value) add indent value.
 		setIndent(int value) set indent value.
 		 writeoutNode(OutputStream out) Print this instance to output. it can be file out or screen out
 		 getParent() Get parent node of this instance


	Prog.java, DeclSeq.java, StmtSeq.java, Decl.java, IdList.java, Stmt.java, Assign.java, IfNode.java, Loop.java,In.java, Out.java, Cond.java, Comp.java, Exp.java, Term.java, Fac.java, Comp_op.java, Id.java, Int_node.java, Rw_node.java, Ss_node.java -
		each java files creates the node type of each of following nodes:prog, decl_seq, stmt_seq, decl, id_list, stmt, assign, if_node, loop, in, out, cond, comp, exp, term, fac, comp_op, id, int_node, rw_node, ss_node

  	Parse.java - The main process, it parses a input file and output a parse tree.
  	ParserException.java - It handles the error input
